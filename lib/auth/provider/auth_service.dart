import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:logger/logger.dart';

final logger = Logger();

class AuthService extends ChangeNotifier with WidgetsBindingObserver {
  final db = FirebaseFirestore.instance;
  final auth = FirebaseAuth.instance;
  User? user;
  User? get currentUser => user;

  AuthService() {
    WidgetsBinding.instance.addObserver(this);
    auth.authStateChanges().listen((User? user) async {
      this.user = user;
      if (user == null) {
        logger.i("User is signed out!");
      } else { // check if the user is setup
        logger.i("User is signed in!");
      }
      notifyListeners();
    });
  }

  Future<bool> isUserSetup() async {
    final userData = await db.collection('users').doc(user!.uid).get();
    return userData.data()?['is_setup'] ?? false;
  }

  Future<String?> signIn(String email, String password) async {
    try {
      final credential = await FirebaseAuth.instance
          .signInWithEmailAndPassword(email: email, password: password);

      // Ensure local user is up to date
      user = credential.user;

      // Update the status of the user to online if the user signs in
      await updateUserStatus(user, true);
      return 'Success';
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        return ('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        return ('Wrong password provided for that user.');
      } else {
        return e.message;
      }
    } catch (e) {
      return e.toString();
    }
  }

  Future<String?> signUp(String email, String password) async {
    try {
      final credential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);
      // get the user id generated by firebase auth
      final userID = credential.user!.uid;

      // create the doc for the new user
      await db.collection('users').doc(userID).set({
        'email': email,
        'profile_pic': '',
        'full_name': '',
        'first_name': '',
        'last_name': '',
        'civil_status': '',
        'age': 0,
        'birthdate': null,
        'address': '',
        'phone_number': '',
        'role': 'user',
        'status_online': false,
        'is_setup': false,
      });

      await db
          .collection('users')
          .doc(userID)
          .collection('health_information')
          .doc('health_info')
          .set({
        'height': 0,
        'weight': 0,
        'blood_type': '',
        'allergies': [],
        'medications': [],
        'other_information': '',
      });
      return 'Success';
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        return ('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        return ('The account already exists for that email.');
      } else {
        return e.message;
      }
    } catch (e) {
      return e.toString();
    }
  }

  Future<void> signOut() async {
    await auth.signOut();

    // update the status to offline if the user signs out
    updateUserStatus(user, false);
  }

  Future<void> updateUserStatus(User? user, bool status) async {
    if (user == null) return;
    await db
        .collection('users')
        .doc(user.uid)
        .update({'status_online': status});
    logger.i('Updated user ${user.uid} status to $status');
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) async {
    if (state == AppLifecycleState.detached) {
      await updateUserStatus(user, false);
      logger.i('App is in detached state and user status is set to offline');
    }
  }
}
